/* -------------------------------------------------- */
	CSS
/* -------------------------------------------------- */

Control your specificity

Be modular and create reusable style

Ease maintenance

Work better as a team

Write less to achieve more


/* -------------------------------------------------- */
	DOM
/* -------------------------------------------------- */


DOM

	A DOM has a tree-like structure. Each element, attribute and piece of text in the markup language becomes a DOM node in the tree structure. The nodes are defined by their relationship to other DOM nodes. Some elements are parents of child nodes, and child nodes have siblings.



Load HTML 	--> 	Parse HTML

Load CSS 	-->		Parse CSS

Create DOM Tree

Display




/* -------------------------------------------------- */
	Apply CSS to HTML
/* -------------------------------------------------- */

External /* best */

	<link rel="stylesheet" href="style.css">


Internal

	<style>
		...
	</style>


Inline Style

	<h1 style="color: blue;background-color: yellow;border: 1px solid black;">Hello World!</h1>

    <p style="color:red;">This is my first CSS example</p>

    The only time you might have to resort to using inline styles is when your working environment is really restrictive (perhaps your CMS only allows you to edit the HTML body.)


/* -------------------------------------------------- */
	Syntax
/* -------------------------------------------------- */


CSS Declaration

	body {
		property : value ; 
		property : value   /* ; not needed */
	}


Selector Ruleset

	div p, #id:first-line 
	{
		property : value ; 
		property : value   /* ; not needed */
	}


CSS Statements

	At-rules @

		/* @charset */
		
		/* @media */

			Applied only if the device which runs the browser matches the expressed condition;

			@media (min-width: 801px) 
			{
			  body 
			  {
			    margin: 0 auto;
			    width: 800px;
			  }
			}
		
		/* @supports */

			Applied only if the browser actually supports the tested feature;

		/* @document */

			Applied only if the current page matches some conditions.

		/* @font-face */

		/* @import */

			@import 'custom.css';

			Imports another CSS file into the current CSS.


/* -------------------------------------------------- */
	Comment Styles
/* -------------------------------------------------- */


/* Handle basic element styling */
/* --------------------------------------------------------------- */
body {font: 1em/150% Helvetica, Arial, sans-serif; padding: 1em; margin: 0 auto; max-width: 33em;}
@media (min-width: 70em) {
  /* Let's special case the global font size. On large screen or window,
     we increase the font size for better readability */
  body {font-size: 130%;}
}

h1 {font-size: 1.5em;}

/* Handle specific elements nested in the DOM  */
/* --------------------------------------------------------------- */
div p, #id:first-line {background-color: red; background-style: none}
div p                 {margin          :   0; padding         : 1em;}
div p + p             {padding-top     :   0;                       }







/* -------------------------------------------------- */
	Selectors
/* -------------------------------------------------- */


Simple selectors

	Match one or more elements based on element type, class, or id.

	/* All p elements are red */
	p {
	  color: red;
	}

	/* The element with the class "first" is bolded */
	.first {
	  font-weight: bold;
	}


Handling multiple classes

	/* CSS */
	.base-box {
	  background-image: linear-gradient(to bottom, rgba(0,0,0,0.1), rgba(0,0,0,0.3));
	  padding: 3px 3px 3px 7px;
	}

	.important {
	  font-weight: bold;
	}

	.editor-note {
	  background-color: #9999ff;
	  border-left: 6px solid #333399;
	}

	.warning {
	  background-color: #ff9999;
	  border-left: 6px solid #993333;
	}

	/* HTML */
	<p class="base-box warning important">My first paragraph.</p>



ID selectors

	#polite {
	  font-family: cursive;
	}



Universal Selector

	Careful when using the universal selector. As it applies to all elements, using it in large web pages can have a perceptible impact on performance: web pages can be displayed slower than expected. There are not many instances where you'd want to use this selector.

	* {
	  padding: 5px;
	  border: 1px solid black;
	  background: rgba(255,0,0,0.25)
	}


/* -------------------------------------------------- */

Attribute selectors

	Match one or more elements based on their attributes/attribute values.

	Attribute selectors are a special kind of selector that will match elements based on their attributes and attribute values. Their generic syntax consists of square brackets ([]) containing an attribute name followed by an optional condition to match against the value of the attribute. Attribute selectors can be divided into two categories depending on the way they match attribute values: Presence and value attribute selectors and Substring value attribute selectors.

	<ul>
		<li data-quantity="2kg" data-meat>Chicken</li>
		<li data-quantity="1kg" data-vegetable>Tomatoes</li>
		<li data-quantity="optional 10ml" data-vegetable="liquid">Olive oil</li>
		<li data-quantity="700g" data-vegetable="not spicy like chili">Red pepper</li>
	</ul>


	[data-vegetable] {
		color: green
	}


	[data-vegetable="liquid"] {
		color: green
	}

	[data-vegetable~="spicy"] {
		color: red;
	}

Substring Value Selectors


	[attr|=val]
		
		This selector will select all elements with the attribute attr for which the value is exactly val or starts with val- (careful, the dash here isn't a mistake, this is to handle language codes.)

	[attr^=val]

		This selector will select all elements with the attribute attr for which the value starts with val.

	[attr$=val]

		This selector will select all elements with the attribute attr for which the value ends with val.

	[attr*=val]

		This selector will select all elements with the attribute attr for which the value contains the string val (unlike [attr~=val], this selector doesn't treat spaces as value separators but as part of the attribute value.)

	[lang|=fr] {
		font-weight: bold;
	}

	/* All elements with the attribute "data-vegetable" containing
	the value "not spicy" are turned back to green */
	[data-vegetable*="not spicy"] {
		color: green;
	}

	/* All elements with the attribute "data-quantity", for which
	the value ends with "kg" */
	[data-quantity$="kg"] {
		font-weight: bold;
	}

	/* All elements with the attribute "data-quantity", for which the
	value starts with "optional" */
	[data-quantity^="optional"] {
		opacity: 0.5;
	}

/* -------------------------------------------------- */

Pseudo-classes

	Match one or more elements that exist in a certain state, such as an element that is being hovered over by the mouse pointer, or a checkbox that is currently disabled or checked, or an element that is the first child of its parent in the DOM tree.

	A CSS pseudo-class is a keyword preceded by a colon (:) that is added on to the end of selectors to specify that you want to style the selected elements only when they are in certain state.

	:active
	:any
	:checked
	:default
	:dir()
	:disabled
	:empty
	:enabled
	:first
	:first-child
	:first-of-type
	:fullscreen
	:focus
	:hover
	:indeterminate
	:in-range
	:invalid
	:lang()
	:last-child
	:last-of-type
	:left
	:link
	:not()
	:nth-child()
	:nth-last-child()
	:nth-last-of-type()
	:nth-of-type()
	:only-child
	:only-of-type
	:optional
	:out-of-range
	:read-only
	:read-write
	:required
	:right
	:root
	:scope
	:target
	:valid
	:visited



	a:visited {
		color: blue;
	}

	a:hover,
	a:active,
	a:focus {
		color: darkred;
		text-decoration: none;
	}


/* -------------------------------------------------- */

Pseudo-elements

	Match one or more parts of content that are in a certain position in relation to an element, for example the first word of each paragraph, or generated content appearing just before an element.

	Pseudo-elements are very much like pseudo-classes, but they have differences. They are keywords — this time preceded by two colons (::) — that can be added to the end of selectors to select a certain part of an element.

	::after
	::before
	::first-letter
	::first-line
	::selection
	::backdrop

	<ul>
		<li><a href="https://developer.mozilla.org">CSS</a></li>
		<li><a href="https://developer.mozilla.org">HTML</a></li>
	</ul>

	/* All elements with an attribute "href", which values
	start with "http", will be added an arrow after its
	content (to indicate it's an external link) */
	[href^=http]::after {
		content: '>';
	}


/* -------------------------------------------------- */

Combinators

	These are not exactly selectors themselves, but ways of combining two or more selectors in useful ways for very specific selections. So for example, you could select only paragraphs that are direct descendants of divs, or paragraphs that come directly after headings.


AB	
	
	Any element matching both A and B at the same time.

A B	

	Any element matching B that is a descendant of an element matching A (that is: a child, or a child of a child, etc.)

A > B

	Any element matching B that is a direct child of an element matching A.

A + B	

	Any element matching B that is the next sibling of an element matching A (that is: the next child of the same parent.)

A ~ B

	Any element matching B that is among the next sibling of an element matching A (that is: one of the next children of the same parent.)


	/* All <td>s within a <table> and all <th>s within a <table>
	   Comma is not a combinator, it just allows you to target
	   several selectors with the same CSS ruleset */
	table td, table th {
		border : 1px solid black;
		padding: 0.5em 0.5em 0.4em;
	}


	/* All <th>s within <thead>s that are within <table>s */
	table thead th {
		color: white;
		background: black;
	}

	/* All <td>s preceded by another <td>,
	within a <tbody>, within a <table> */
	table tbody td + td {
		text-align: center;
	}

	/* All <td>s that are a last child,
	within a <tbody>, within a <table> */
	table tbody td:last-child {
		text-align: right
	}

	/* All <th>s, within a <tfoot>s, within a <table> */
	table tfoot th {
		text-align: right;
		border-top-width: 5px;
		border-left: none;
		border-bottom: none;
	}

	/* All <td>s preceded by a <th>, within a <table> */
	table th + td {
		text-align: right;
		border-top-width: 5px;
		color: white;
		background: black;
	}

	/* All pseudo-elements "before" <td>s that are a last child,
	appearing within elements with a class of "with-currency" that
	also have an attribute "lang" with the value "en-US" */
	.with-currency[lang="en-US"] td:last-child::before {
		content: '$';
	}

	/* All pseudo-elements "after" <td>s that are a last child,
	appearing within elements with the class "with-currency" that
	also have an attribute "lang" with the value "fr" */
	.with-currency[lang="fr"] td:last-child::after {
		content: ' €';
	}

/* -------------------------------------------------- */

Multiple selectors

	You can write multiple selectors separated by commas, to apply the same rule to multiple sets of selected elements at once.

	h1, h2, h3, h4, h5, h6 {
		font-family: helvetica, 'sans serif';
	}


/* -------------------------------------------------- */
	SMACSS : Scalable and Modular Architecture CSS
/* -------------------------------------------------- */


Base

	This include selector rules. No classes or id here. This is to reset browser rules and set a base style for elements which are going to be consistent and reused. You are defining here the default style for your elements. This can include html, body, h1, h2, h3, h4, h5, h6, img, a…

Layout

	This is where the style used to lay out your pages will sit. It should be separated to your module style for flexibility. You want to be able to use your layout style to build your pages in the most flexible way possible. A module or components should be added to any place in your site independent from the layout.

Modules

	A module is a part or a component of your page. Your menu, dialog box, download list or any widget you have on your page. It depends of your design.

	A module is independent from your layout so it can live anywhere in you app. You should be able to copy/paste the html and move somewhere else, and it will look and behave the same.

	A module should be encapsulated in one file and easily accessible. It will be easy to find and you’ll be in control of what you want to update as it won’t be depending on any other style.

States

	A state will be a style which modifies or overrides other rules. A great example is accordion when collapsing or expanding elements. Using a `is-collapsed` class will make sure your element is collapsed. This is a good place to use !important (and probably the only one) as you want this state to be applied no matter what. Also, it can relate to modified state with javascript.

	Good practise is to prefix or add a namespace to those states classes like is- or has-: is-hidden, is-displayed, is-collapsed, has-children, etc

Theme

	Idea is to have a file called theme.css where you can define all the theme rules.

	// box.scss
	.box {
	  border: 1px solid;
	}
	// theme.scss
	.box {
	  border-color: red;
	}


/* -------------------------------------------------- */
	CSS Values and Units
/* -------------------------------------------------- */

Numeric values

	Length values for specifying e.g. element width, border thickness, or font size, and unitless integers for specifying e.g. relative line width or number of times to run an animation.

Percentages

	Can also be used to specify size or length — relative to a parent container's width or height for example, or the default font-size.

Colors

	For specifying background colors, text colors, etc.

Coordinate positions

	e.g. for specifying the position of a positioned element relative to the top left of the screen.

Functions

	For specifying e.g. background images or background image gradients.


/* -------------------------------------------------- */

Length and Size

	margin: 5px;
	padding: 10px;
	border: 2px
	width: 150px;
	font-size: 18px;

	px (pixel)

		absolute units, same size regardless of any other related settings
		
	mm, cm, in

		Millimeters, centimeters, or inches

	pt, pc

		Points (1/72 of an inch) or picas (12 points.)

	em

		1em is the same as the font-size of the current element (more specifically, the width of a capital letter M.) The default base font-size given to web pages by web browsers before CSS styling is applied is 16 pixels, which means the computed value of 1em is 16 pixels for an element by default. But beware — font sizes are inherited by elements from their parents, so if different font sizes have been set on parent elements, the pixel equivalent of an em can start to become complicated.

	ex, ch

		Respectively these are the height of a lower case x, and the width of the number 0. These are not as commonly used or well-supported as ems.

	rem

		The rem (root em) works in exactly the same way as the em, except that it will always equal the size of the default base font-size; inherited font sizes will have no effect, so this sounds like a much better option than ems, although rems don't work in older versions of Internet Explorer.

	vw, vh

		Respectively these are 1/100th of the width of the viewport, and 1/100th of the height of the viewport. Again, these are not as widely supported as rems.

Unitless Values

	For example, if you want to completely remove the margin or padding from an element, you can just use unitless 0 — 0 is 0, no matter what units were set before!

	margin: 0;

	line-height: 1.5;

CSS Animations

	@keyframes rotate {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}

	p:hover {
		animation-name: rotate;
		animation-duration: 0.6s;
		animation-timing-function: linear;
		animation-iteration-count: 5;
	}

Percentages

	font-size: 200%;
	width: 75%;

Colour

	Hexadecimal values

		background-color: #ff0000; /* red */

	RGB

		background-color: rgb(255,0,0);

	HSL

		Slightly less well supported than RGB is the HSL model (not on old versions of IE), which was implemented after much interest from designers — instead of red, green and blue values, the hsl() function accepts hue, saturation, and lightness values, which are used to distinguish between the 16.7 million colors, but in a different way

		hue

			the base shade of the color. This takes a value between 0 and 360, presenting the angles round a color wheel.

		saturation

			how saturated is the color? This takes a value from 0-100%, where 0 is no color (it will appear as a shade of grey), and 100% is full color saturation

		lightness

			how light, or bright is the color? This takes a value from 0-100%, where 0 is no light (it will appear completely black) and 100% is full light (it will appear completely white)

		background-color: hsl(0,100%,50%);
		background-color: hsl(240,100%,50%);

	RGBA (transparency)

		background-color: rgba(255,0,0,0.5);

	HSLA (transparency)

		background-color: hsla(240,100%,50%,0.5);

	Obacity

		opacity: 0.5;


/* -------------------------------------------------- */
	Cascade and inheritance
/* -------------------------------------------------- */

Cascading Style Sheets

	Which style will override which?


Importance

	lways win over all others

	border: none !important;


Specificity

	Specificity is basically a measure of how specific a selector is, in terms of how many elements it could match. As shown in the example seen above, element selectors have low specificity. Class selectors have a higher specificity, so will win against element selectors. ID selectors have an even higher specificity, so will win against class selectors. The only way to win against an ID selector is to use !important.

	/* weight: 0101 */
	#outer a {
		background-color: red;
	}

	/* weight: 0201 */
	#outer #inner a {
		background-color: blue;
	}

	/* weight: 0104 */
	#outer div ul li a {
		color: yellow;
	}


Source order

	later rules will win over earlier rules

	p {
		color: blue;
	}

	/* This rule will win over the first one */
	p {
		color: red;
	}

	/* This rule will win by specificity*/
	.footnote { 
		color: blue;
	}

	p {
		color: red;
	}


/* -------------------------------------------------- */

Inheritance

	inherit

		This value sets the property value applied to a selected element to be the same as that of its parent element.

	initial

		This value sets the property value applied to a selected element to be the same as the value set for that element in the browser's default style sheet. If no value is set by the browser's default style sheet and the property is naturally inherited, then the property value is set to inherit instead.

	unset

		This value resets the property to its natural value, which means that if the property is naturally inherited it acts like inherit, otherwise it acts like initial.


	body {
		color: green;
	}

	.inherit a {
		color: inherit;
	}

	.initial a {
		color: initial
	}

	.unset a {
		color: unset;
	}



/* -------------------------------------------------- */
	CSS Box Model
/* -------------------------------------------------- */

Every element within a document is structured as a rectangular box inside the document layout, the size and "onion layers" of which can be tweaked using some specific CSS properties.

margin --> border --> padding --> [content]


content

	width
	height

	The width and height properties set the width and height of the content box, which is the area in which the content of the box is displayed — this content includes both text content sat inside the box, and other boxes representing nested child elements.

padding

	The padding box represents the inner margin of a CSS box — the layer between the outer edge of the content box and the inner edge of the border. The size of this layer can be set on all four sides at once with the padding shorthand property, or one side at a time with the padding-top, padding-right, padding-bottom and padding-left properties.

border

	The border of a CSS box is a distinct layer, sitting between the outer edge of the padding and the inner edge of the margin. By default the border has a size of 0 — making it invisible — but you can set the thickness, style and color of the border to make it appear.

	border-top, border-right, border-bottom, border-left

		Set the thickness, style and color of one side of the border.

	border-width, border-style, border-color

		Set only the thickness, style, or color individually, but for all four sides of the border.

		You can also set one of the three properties of a single side of the border individually, using border-top-width, border-top-style, border-top-color, etc. 

margin

	The margin represents the outer area surrounding the CSS box, which pushes up against other CSS boxes in the layout. It behaves rather like padding; the shorthand property is margin and the individual properties are margin-top, margin-right, margin-bottom, and margin-left.

/* -------------------------------------------------- */

Advanced box manipulation

Overflow

	When you set the size of a box with absolute values (e.g. a fixed pixel width/height), the content may not fit within the allowed size, in which case the content overflows the box. To control what happens in such cases, we can use the overflow property.

	auto

		If there is too much content, the overflowing content is hidden and scroll bars are shown to let the user scroll to see all the content.

	hidden

		If there is too much content, the overflowing content is hidden.

	visible

		If there is too much content, the overflowing content is shown outside of the box (this is usually the default behavior.)

	.autoscroll { overflow: auto;    }
	.clipped    { overflow: hidden;  }
	.default    { overflow: visible; }



/* -------------------------------------------------- */
	Debugging
/* -------------------------------------------------- */

Just like HTML, CSS is permissive. In CSS's case, if a declaration is invalid (contains a syntax error, or the browser doesn't support that feature), the browser just ignores it completely and moves on to the next one it finds.

If a selector is invalid, then it doesn't select anything, and the whole rule does nothing — again, the browser just moves on to the next rule.



Web Developer Tool

	Inspect DOM --> See CSS rules applied

CSS Validator

	W3C CSS Validation Service


/* -------------------------------------------------- */
	z-index
/* -------------------------------------------------- */

The z-index property specifies the z-order of a positioned element and its descendants. When elements overlap, z-order determines which one covers the other. An element with a larger z-index generally covers an element with a lower one.
	
auto
	
	The box does not establish a new local stacking context. The stack level of the generated box in the current stacking context is the same as its parent's box.

	z-index: auto;

<integer>

	This integer is the stack level of the generated box in the current stacking context. The box also establishes a local stacking context in which its stack level is 0. This means that the z-indexes of descendants are not compared to the z-indexes of elements outside this element.

	z-index: 0;
	z-index: 3;
	z-index: 289;
	z-index: -1; /* Negative values to lower the priority */

Global values

	z-index: inherit;
	z-index: initial;
	z-index: unset;



/* -------------------------------------------------- */
	Floats
/* -------------------------------------------------- */

/* img on left, words flow around it */

	<img src="butterfly.jpg">
	<p> ... </p>

	img {
	  float: left;
	  margin: 0 30px 0 0;
	}


/* 2-column layout */

	The :nth-of-type(n) selector matches every element that is the nth child, of a particular type, of its parent.

	div:nth-of-type(1) { 
	  width: 48%;
	  float: left;
	}
	div:nth-of-type(2) {
	  width: 48%;
	  float: right;
	}

/* 3-column layout */

	div:nth-of-type(1) {
	  width: 36%;
	  float: left;
	}

	div:nth-of-type(2) {
	  width: 30%;
	  float: left;
	  margin-left: 4%;
	}

	div:nth-of-type(3) {
	  width: 26%;
	  float: right;
	}

/* clear */

	stop floating here

	footer {
	  clear: both;
	}

	none

		Is a keyword indicating that the element is not moved down to clear past floating elements.

	left

		Is a keyword indicating that the element is moved down to clear past left floats.

	right

		Is a keyword indicating that the element is moved down to clear past right floats.

	both

		Is a keyword indicating that the element is moved down to clear past both left and right floats.

	inline-start 

		Is a keyword indicating that the element is moved down to clear floats on start side of its containing block, that is the left floats on ltr scripts and the right floats on rtl scripts.

	inline-end 
		
		Is a keyword indicating that the element is moved down to clear floats on end side of its containing block, that is the right floats on ltr scripts and the left floats on rtl scripts.


/* -------------------------------------------------- */

Issues

 	The whole width can be tricky to calculate

Solution

	box-sizing

	Makes the box model change so the width of the box is taken as content + padding + border, not just content — so adding padding and border won't make the box any wider — it'll just make the content narrower to accomodate.

	* {
	  box-sizing: border-box;
	}

/* -------------------------------------------------- */

Issues

	Add margin-top to footer against above floating columns

Solution

	/* columns above */
	<div class="clearfix"></div>
	/* footer below */

	.clearfix {
	  clear: both;
	}


/* -------------------------------------------------- */
	ALL: INITIAL;
/* -------------------------------------------------- */

Effectively stops inheritance.

Prevents legacy styles from leaking into fresh work.

A very progressive way of defending against legacy.

p {
	all: initial;
}

/* -------------------------------------------------- */
	DEFENSE.CSS
/* -------------------------------------------------- */

old.css --> defense.css --> new.css

	Fixes for collisions between old.css and new.css.

	Contains hacks, crude code, etc.

	Remove old.css and defense.css at end of project.


/* -------------------------------------------------- */
	BEM - Block Element Modifier
/* -------------------------------------------------- */

Naming concention for modular/object-oriented CSS

	.{block}__{element}
	.{block}__{element}--{modifier}
	.{block}--{modifier}

Grandchildren are a bad idea; Start a new block instead!


.object {
	color: red;
}
.object__descendant {
	color: black;
}


/* -------------------------------------------------- */
	SHAME.CSS :<
/* -------------------------------------------------- */

The idea of shame.css is that you have a totally new stylesheet reserved just for your hacky code. The code you have to write to get the release out on time, but the code that makes you ashamed. :<

/* -------------------------------------------------- */
	CSS Pre-Processors
/* -------------------------------------------------- */

A preprocessor is a program that takes one type of data and converts it to another type of data. In the case of HTML and CSS, some of the more popular preprocessor languages include Haml and Sass. Haml is processed into HTML and Sass is processed into CSS.

Pre-processors, with their advanced features, helped to achieve writing reusable, maintainable and extensible codes in CSS. By using a pre-processor, you can easily increase your productivity, and decrease the amount of code you are writing in a project.

SASS

LESS

Stylus


/* -------------------------------------------------- */
	Utility Classes
/* -------------------------------------------------- */

<div class="pull-left col-md-6 small"></div>

Problem

	Utility classes tie your markup presentation


/* -------------------------------------------------- */
	Positioning
/* -------------------------------------------------- */

Static positioning

	Static positioning is the default that every element gets — it just means "put the element into it's normal position in the document layout flow — nothing special to see here".

	.positioned {
	   position: static;
	}

Relative positioning

	Relative positioning is the first position type we'll take a look at. This is very similar to static positioning, except that once the positioned element has taken its place in the normal layout flow, you can then modify its final position, including making it overlap other elements on the page.

	.positioned {
		position: relative;
		top: 30px;
		left: 30px;
	}

Absolute positioning

	An absolutely positioned element no longer exists in the normal document layout flow. Instead, it sits on it's own layer separate from everything else.

	position: absolute;

Fixed positioning

	There is one more type of positioning to cover — fixed. This works in exactly the same way as absolute positioning, with one key difference — whereas absolute positioning fixes an element in place relative to the <html> element or its nearest positioned ancestor, fixed positioning fixes an element in place relative to the browser viewport itself. This means that you can create useful UI items that are fixed in place, like persisting navigation menus.

	position: fixed;
	
Sticky position (experimental)

	There is a new positioning value available called position: sticky, support for which is not very widespread yet. This is basically a hybrid between relative and fixed position, which allows a positioned element to act like it is relatively positioned until it is scrolled to a certain threshold point (e.g. 10px from the top of the viewport), after which it becomes fixed.

/* -------------------------------------------------- */
	Flexbox
/* -------------------------------------------------- */

The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices.

The defining aspect of the flex layout is the ability to alter its items' width and/or height to best fit in the available space on any display device. A flex container expands items to fill available free space, or shrinks them to prevent overflow.

The flexbox layout algorithm is direction-agnostic as opposed to the block layout, which is vertically-biased, or the inline layout, which is horizontally-biased. While the block layout works well for pages, it lacks sufficient definition to support application components that have to change orientation, resize, stretch, or shrink as the user agent changes, flips from vertical to horizontal, and so forth.

Flex container

	The parent element in which flex items are contained. A flex container is defined using the flex or inline-flex values of the display property.

Flex item

	Each child of a flex container becomes a flex item. Text directly contained in a flex container is wrapped in an anonymous flex item.

Axes

	Every flexible box layout follows two axes. The main axis is the axis along which the flex items follow each other. The cross axis is the axis perpendicular to the main axis.

	The flex-direction property establishes the main axis.

	The justify-content property defines how flex items are laid out along the main axis on the current line.

	The align-items property defines the default for how flex items are laid out along the cross axis on the current line.
	
	The align-self property defines how a single flex item is aligned on the cross axis, and overrides the default established by align-items.

Directions

	The main start/main end and cross start/cross end sides of the flex container describe the origin and terminus of the flow of flex items. They follow the main axis and cross axis of the flex container in the vector established by the writing-mode (left-to-right, right-to-left, etc.).

	The order property assigns elements to ordinal groups and determines which elements appear first.

	The flex-flow property shorthands the flex-direction and flex-wrap properties to lay out the flex items.

Lines

	Flex items can be laid out on either a single line or on several lines according to the flex-wrap property, which controls the direction of the cross axis and the direction in which new lines are stacked.

Dimensions

	The flex items' agnostic equivalents of height and width are main size and cross size, which respectively follow the main axis and cross axis of the flex container.

	The min-height and min-width properties initial value is 0.

	The flex property shorthands the flex-grow, flex-shrink, and flex-basis properties to establish the flexibility of the flex items.

/* -------------------------------------------------- */

Usage

	display: flex

	display: inline-flex

Doing so defines the element as a flex container and its children as flex items. The flex value makes the flex container a block-level element. The inline-flex value makes the flex container an atomic inline-level element.


/* -------------------------------------------------- */

Holy Grail Layout Example

<!DOCTYPE html>
<html lang="en">
  <head>
    <style>
    body {
        font: 24px Helvetica;
        background: #999999;
    }

    #main {
        min-height: 800px;
        margin: 0px;
        padding: 0px;
        display: flex;
        flex-flow: row;
    }
 
    #main > article {
        margin: 4px;
        padding: 5px;
        border: 1px solid #cccc33;
        border-radius: 7pt;
        background: #dddd88;
        flex: 3 1 60%;
        order: 2;
    }

    #main > nav {
        margin: 4px;
        padding: 5px;
        border: 1px solid #8888bb;
        border-radius: 7pt;
        background: #ccccff;
        flex: 1 6 20%;
        order: 1;
    }
  
    #main > aside {
        margin: 4px;
        padding: 5px;
        border: 1px solid #8888bb;
        border-radius: 7pt;
        background: #ccccff;
        flex: 1 6 20%;
        order: 3;
    }
 
    header, footer {
        display: block;
        margin: 4px;
        padding: 5px;
        min-height: 100px;
        border: 1px solid #eebb55;
        border-radius: 7pt;
        background: #ffeebb;
    }
 
    /* Too narrow to support three columns */
    @media all and (max-width: 640px) {
        #main, #page {
            flex-direction: column;
        }

        #main > article, #main > nav, #main > aside {
        /* Return them to document order */
            order: 0;
        }
  
        #main > nav, #main > aside, header, footer {
            min-height: 50px;
            max-height: 50px;
        }
    }
    </style>
  </head>
  <body>
    <header>header</header>
    <div id='main'>
      <article>article</article>
      <nav>nav</nav>
      <aside>aside</aside>
    </div>
    <footer>footer</footer>
  </body>
</html>


/* -------------------------------------------------- */
	Simple Flexbox
/* -------------------------------------------------- */

Set container

	.container {
	    display: flex;
	}

		Items inside container will position on horizontal axis automatically

Vertical layout

	.container {
	    display: flex;
	    flex-direction: column;
	}

Justify content and Align your items

	.container {
	    display: flex;
	    flex-direction: row;
	    justify-content: center;
	}

	Justified items will be displayed center of main-axis

	.container {
	    display: flex;
	    flex-direction: row;
	    justify-content: center;
	    align-items: center;
	}

	Aligned items will be displayed center of cross-axis


/* -------------------------------------------------- */
	Flexbox Guide
/* -------------------------------------------------- */

display

	This defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children.

.container {
  display: flex; /* or inline-flex */
}	


order 

	By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container.

.item {
  order: <integer>;
}


flex-direction

	This establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns.

.container {
  flex-direction: row | row-reverse | column | column-reverse;
}	


flex-grow

	This defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up.

	If all items have flex-grow set to 1, the remaining space in the container will be distributed equally to all children. If one of the children has a value of 2, the remaining space would take up twice as much space as the others (or it will try to, at least).

.item {
  flex-grow: <number>; /* default 0 */
}



flex-wrap

	By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.

.container{
  flex-wrap: nowrap | wrap | wrap-reverse;
}



flex-shrink

	This defines the ability for a flex item to shrink if necessary.

.item {
  flex-shrink: <number>; /* default 1 */
}	



flex-basis

	This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The auto keyword means "look at my width or height property" (which was temporarily done by the main-size keyword until deprecated). The content keyword means "size it based on the item's content" - this keyword isn't well supported yet, so it's hard to test and harder to know what its brethren max-content, min-content, and fit-content do.

.item {
  flex-basis: <length> | auto; /* default auto */
}


justify-content

	This defines the alignment along the main axis. It helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.

.container {
  justify-content: flex-start | flex-end | center | space-between | space-around;
}



flex

	This is the shorthand for flex-grow, flex-shrink and flex-basis combined. The second and third parameters (flex-shrink and flex-basis) are optional. Default is 0 1 auto.

	It is recommended that you use this shorthand property rather than set the individual properties. The short hand sets the other values intelligently.

.item {
  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
}	



align-self

	This allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.

.item {
  align-self: auto | flex-start | flex-end | center | baseline | stretch;
}



alieng-items

	This defines the default behaviour for how flex items are laid out along the cross axis on the current line. Think of it as the justify-content version for the cross-axis (perpendicular to the main-axis).

.container {
  align-items: flex-start | flex-end | center | baseline | stretch;
}



align-content
	
	This aligns a flex container's lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis.

.container {
  align-content: flex-start | flex-end | center | space-between | space-around | stretch;
}




	

/* -------------------------------------------------- */
	border-box
/* -------------------------------------------------- */

Size of the box will remain the same regardless of border, padding, margin, tweaks

/* useful highlight */
* {
   outline: 1px solid red !important;
}

* {
    /* browser compatibility */
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    /* standard */
    box-sizing: border-box;
}


/* -------------------------------------------------- */
	Flex Box
/* -------------------------------------------------- */

.app {
    display: -webkit-flex;
    display: flex;
}

/* -------------------------------------------------- */
	Code, Test, Refine
/* -------------------------------------------------- */

Get structure of the page right

	Boxify

	Work on tags, if heading is needed h1, h2, h3...

	Size of boxes

	Box Positions

Look for natural boxes

Look for repeated styles and semantic elements

Write your HTML

Apply Styles (from BIGGEST to smallest)

Fix things

Repeat



/* -------------------------------------------------- */
	Responsive Web Pages
/* -------------------------------------------------- */

960px is the old max-width of page content

Bigger margin to make layout easier to use on smaller devices

Column configuration

	Compaitiable with 2, 3, 4 column configurations, you need a 12 column layout

* {
    border: 1px solid red !important;
}

* {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    box-sizing: border-box;
}

.grid {
    margin: 0 auto;
    max-width: 1200px;
    width: 100%;
}

.row {
    width: 100%;
    margin-bottom: 20px;
    display: flex;
    flex-wrap: wrap;
}

.col-1 {
    width: 8.33%;
}

.col-2 {
    width: 16.66%;
}

.col-3 {
    width: 25%;
}

.col-4 {
    width: 33.33%;
}

.col-5 {
    width: 41.66%;
}

.col-6 {
    width: 50%;
}

.col-7 {
    width: 58.33%;
}

.col-8 {
    width: 66.66%;
}

.col-9 {
    width: 75%;
}

.col-10 {
    width: 83.33%;
}

.col-11 {
    width: 91.66%;
}

.col-12 {
    width: 100%;
}

/* index. html 

<body>
  <div class="grid">
    <div class="row">
      <div class="col-2">2 Columns</div>
      <div class="col-10">10 Columns</div>
    </div>
    <div class="row">
      <div class="col-3">3 Columns</div>
      <div class="col-9">9 Columns</div>
    </div>
    <div class="row">
      <div class="col-4">4 Columns</div>
      <div class="col-4">4 Columns</div>
      <div class="col-4">4 Columns</div>
    </div>
    <div class="row">
      <div class="col-3">3 Columns</div>
      <div class="col-6">6 Columns</div>
      <div class="col-3">3 Columns</div>
    </div>
  </div>
</body>
*/


Overflow is another great way at handling page content in limited space.


/* -------------------------------------------------- */
	CSS Resetting
/* -------------------------------------------------- */

https://necolas.github.io/normalize.css/
https://github.com/necolas/normalize.css/

<link rel="stylesheet" src="//normalize-css.googlecode.com/svn/trunk/normalize.css">

To make sure that your styles will work the same across all browsers!

/* -------------------------------------------------- */
	
/* -------------------------------------------------- */